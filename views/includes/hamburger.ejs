<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Floating Menu with Chatbot</title>
  <style>
    /* ----------- Your Floating Menu Styles ----------- */
    body {
      background: #0d0d0d;
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
      height: 100vh;
    }

    .floating-menu {
      position: fixed;
      bottom: 30px;
      left: 30px;
      z-index: 1000;
    }

    .plus-btn {
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #00ffaa, #00c3ff);
      color: #000;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      cursor: pointer;
      box-shadow: 0 0 15px #00ffaa88;
      transition: transform 0.3s ease;
    }

    .plus-btn:hover {
      transform: rotate(45deg);
    }

    .menu-items {
      position: absolute;
      bottom: 70px;
      left: 0;
      display: flex;
      flex-direction: column;
      gap: 12px;
      opacity: 0;
      pointer-events: none;
      transform: translateY(10px);
      transition: all 0.4s ease;
    }

    .floating-menu:hover .menu-items,
    .floating-menu.active .menu-items {
      opacity: 1;
      pointer-events: auto;
      transform: translateY(0);
    }

    .menu-items a, .menu-items button {
      width: 50px;
      height: 50px;
      background: #1a1a1a;
      color: #00ffaa;
      border-radius: 50%;
      text-align: center;
      line-height: 50px;
      text-decoration: none;
      font-size: 1.2rem;
      box-shadow: 0 0 10px #00ffaa55;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
    }

    .menu-items a:hover, .menu-items button:hover {
      background: #00ffaa;
      color: #000;
      transform: scale(1.1);
    }

    @media (hover: none) and (pointer: coarse) {
      .floating-menu .menu-items {
        display: none;
      }
      .floating-menu.active .menu-items {
        display: flex;
      }
    }

    /* ----------- Chatbot Styles ----------- */
    #chatbox {
      position: fixed;
      bottom: 100px;
      right: 30px;
      width: 320px;
      max-height: 80vh;
      display: none;
      flex-direction: column;
      backdrop-filter: blur(15px);
      background: rgba(20, 20, 20, 0.9);
      border-radius: 20px;
      box-shadow: 0 0 25px rgba(255, 0, 70, 0.3);
      overflow: hidden;
      border: 1px solid rgba(255, 0, 70, 0.2);
      z-index: 2000;
    }

    #chat-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background: rgba(255, 0, 70, 0.1);
      border-bottom: 1px solid rgba(255, 0, 70, 0.2);
      color: white;
    }

    #bot-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      overflow: hidden;
      margin: 10px auto;
      border: 2px solid rgba(255, 0, 70, 0.3);
      box-shadow: 0 0 20px rgba(255, 0, 70, 0.4);
    }

    #bot-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    #chatlog {
      flex: 1;
      padding: 12px;
      overflow-y: auto;
      max-height: 50vh;
      color: white;
    }

    .bot, .user {
      margin: 10px;
      padding: 12px 16px;
      border-radius: 14px;
      max-width: 80%;
      font-size: 14px;
      word-break: break-word;
    }

    .bot { background: #333; color: #eee; align-self: flex-start; }
    .user { background: #ff0046; color: #fff; align-self: flex-end; }

    #input-area {
      display: flex;
      padding: 8px;
      background: rgba(20, 20, 20, 0.9);
    }

    #input-area input {
      flex: 1;
      padding: 10px;
      border-radius: 10px;
      border: none;
      background: #222;
      color: #fff;
    }

    #input-area button {
      margin-left: 6px;
      padding: 10px;
      border-radius: 10px;
      border: none;
      background: #ff0046;
      color: white;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <!-- üåü Floating Plus Menu -->
  <div class="floating-menu" id="floatingMenu">
    <div class="plus-btn" id="plusBtn">+</div>
    <div class="menu-items">
      <a href="/fav" title="see your favorites">‚≠ê</a>
      <a href="/moodbased" title="mood based Recommendation">ü§©</a> 
      <a href="/new/review" title="leave a review">üìù</a>
      <% if(isAdmin){ %><a href="/admin/dashboard" title="Admin Panel">üôé‚Äç‚ôÇÔ∏è</a><% } %>
      <a href="/userpanel" title="user Panel">üë§</a>
      <!-- üí¨ Chatbot Icon -->
      <button title="Open Chatbot" onclick="toggleChatbot()">üí¨</button>
    </div>
  </div>

  <!-- üí¨ Chatbox -->
  <div id="chatbox">
    <div id="chat-header">
      <span>Movie Bot</span>
      <button id="speech-toggle-btn">üîà</button>
    </div>
    <div id="bot-avatar"><img src="images/avatar.png" alt="Bot Avatar"></div>
    <div id="chatlog"></div>
    <div id="input-area">
      <input type="text" id="user-input" placeholder="Ask me anything...">
      <button onclick="sendMessage()">‚û§</button>
      <button id="voice-btn" title="Voice Input">üé§</button>
    </div>
  </div>

  <script>
    const menu = document.getElementById('floatingMenu');
    const button = document.getElementById('plusBtn');
    button.addEventListener('click', () => menu.classList.toggle('active'));

    window.addEventListener('click', (e) => {
      if (!menu.contains(e.target) && !chatbox.contains(e.target)) {
        menu.classList.remove('active');
      }
    });

    // üß† Chatbot Script
    let speechEnabled = true;
    const synth = window.speechSynthesis;
    const chatbox = document.getElementById('chatbox');
    const chatlog = document.getElementById('chatlog');

    function toggleChatbot() {
      chatbox.style.display = chatbox.style.display === 'flex' ? 'none' : 'flex';
      chatbox.style.flexDirection = 'column';
      if (!chatlog.hasChildNodes()) {
        addBotMessage('Hello! How can I assist you today?');
      }
    }

    document.getElementById('speech-toggle-btn').onclick = () => {
      if (synth.speaking) synth.cancel();
      speechEnabled = !speechEnabled;
      document.getElementById('speech-toggle-btn').textContent = speechEnabled ? 'üîà' : 'üîá';
    };

    function addUserMessage(text) {
      const msg = document.createElement('div');
      msg.className = 'user';
      msg.textContent = text;
      chatlog.appendChild(msg);
      chatlog.scrollTop = chatlog.scrollHeight;
    }

    function addBotMessage(text) {
      const msg = document.createElement('div');
      msg.className = 'bot';
      msg.textContent = text;
      chatlog.appendChild(msg);
      chatlog.scrollTop = chatlog.scrollHeight;
      if (speechEnabled) speak(text);
    }

    function speak(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      synth.speak(utterance);
    }

    function sendMessage() {
      const input = document.getElementById('user-input');
      const userInput = input.value.trim();
      if (!userInput) return;
      addUserMessage(userInput);
      input.value = '';

      const msg = document.createElement('div');
      msg.className = 'bot';
      msg.textContent = 'Typing...';
      chatlog.appendChild(msg);

      fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer 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',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'mistralai/mistral-7b-instruct:free',
          messages: [{ role: 'user', content: userInput }]
        })
      })
      .then(res => res.json())
      .then(data => {
        msg.textContent = data.choices?.[0]?.message?.content || 'Sorry, I didn\'t get that.';
      })
      .catch(err => {
        console.error(err);
        msg.textContent = 'Error! Try again later.';
      });
    }

    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = 'en-US';

    document.getElementById('voice-btn').onclick = () => recognition.start();
    recognition.onresult = (e) => {
      document.getElementById('user-input').value = e.results[0][0].transcript;
      sendMessage();
    };
  </script>

</body>
</html>
